2. ✅ Uveri se da SECRET_KEY u .env fajlu i settings.SECRET_KEY svuda odgovara
env
Copy
Edit
# .env
SECRET_KEY=tajna_kljuc_za_aplikaciju_123

3. ✅ Koristi verify_token() samo iz jednog izvora
Recimo iz core/security.py ili napravi verify_token unutar auth/utils.py,
 ali koristi isključivo settings.SECRET_KEY iz config.py.



📁 Gde se SECRET_KEY čuva? O njemu.
✅ U .env fajlu:

env
Copy
Edit
SECRET_KEY=tajna_kljuc_za_aplikaciju_123
To je privatni fajl koji ne ide na GitHub — najčešće se doda u .gitignore. U razvojnoj fazi može da bude jednostavan string, ali u produkciji:

✅ treba da bude dugačak i nasumičan.

🧪 Kako se učitava iz .env u kod?
U config.py koristiš:

python
Copy
Edit
import os
from dotenv import load_dotenv

load_dotenv()  # učitava .env varijable u os.environ

class Settings:
    SECRET_KEY: str = os.getenv("SECRET_KEY")
Zatim se koristi ovako:

python
Copy
Edit
from app.config import settings

jwt.encode(data, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
🧭 Važno pravilo: SECRET_KEY mora biti isti:
prilikom kreiranja tokena

prilikom verifikacije tokena

Ako koristiš više fajlova (utils.py, core/security.py...) — svi moraju koristiti isti settings.SECRET_KEY.

✅ Preporučena vrednost SECRET_KEY u produkciji
Umesto jednostavne reči, koristi nešto poput:

env
Copy
Edit
SECRET_KEY=Jf93lskfEod!3$kdlwq892jsnfA98djwljf0934JSF#@$
Možeš generisati pomoću Python-a:

python
Copy
Edit
import secrets
print(secrets.token_urlsafe(32))